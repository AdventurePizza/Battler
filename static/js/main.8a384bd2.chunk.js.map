{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["dAppClient","DAppClient","name","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","useState","activeAccount","setActiveAccount","synced","setSynced","showUnsync","setShowUnsync","a","getActiveAccount","clearActiveAccount","then","sync","address","console","log","requestPermissions","permissions","useEffect","fetchGraphQL","operationsDoc","operationName","variables","fetch","method","body","JSON","stringify","query","headers","result","json","ress","addr","query_collection","errors","data","error","user","objkts","map","issuer","metadata","assigned","id","author","attributes","value","join","fetchCollection","slice","getAcc","className","style","position","display","alignItems","backgroundColor","padding","color","width","height","Button","size","title","onClick","unsync","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a384bd2.chunk.js","sourcesContent":["// @ts-nocheck\nimport \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\n\n//ui\nimport { Button } from \"@material-ui/core\";\n\n//logic\nimport { DAppClient } from \"@airgap/beacon-sdk\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\n//import { FirebaseContext } from \"./firebaseContext\";\n\nconst dAppClient = new DAppClient({ name: \"Beacon Docs\" });\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"buildUnity/Build/buildUnity.loader.js\",\n  dataUrl: \"buildUnity/Build/buildUnity.data\",\n  frameworkUrl: \"buildUnity/Build/buildUnity.framework.js\",\n  codeUrl: \"buildUnity/Build/buildUnity.wasm\",\n});\n\nfunction App() {\n  //const { getNfts } = useContext(FirebaseContext);\n  const [activeAccount, setActiveAccount] = useState();\n  const [synced, setSynced] = useState(\"sync\");\n  const [showUnsync, setShowUnsync] = useState(false);\n\n  async function setCharacters(objktIds) {\n    unityContext.send(\"GameManager\", \"setCharacters\", objktIds);\n  }\n\n  useEffect(() => {\n    async function fetchGraphQL(operationsDoc, operationName, variables) {\n      let result = await fetch('https://api.fxhash.xyz/graphql', {\n        method: 'POST',\n        body: JSON.stringify({\n          query: operationsDoc,\n          variables: variables,\n          operationName: operationName,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n\n      var ress = await result.json();\n      return ress;\n    }\n\n    async function fetchCollection(addr) {\n      const { errors, data } = await fetchGraphQL(\n        query_collection,\n        'Query',\n        {\n          \"id\": addr,\n          \"skip\": 0,\n          \"take\": 20,\n          \"filters\": {},\n          \"sort\": {\n            \"id\": \"DESC\"\n          }\n        }\n      )\n      if (errors) {\n        console.error(errors)\n      }\n      console.log(data)\n      const result = data ? data.user.objkts : null;\n      let traits = result.map(({ issuer, metadata, assigned, id }) => ((issuer.author.id === \"tz2DNkXjYmJwtYceizo3LwNVrqfrguWoqmBE\" && issuer.name === \"Batch 2 Test Collection\" && assigned) ?\n        (metadata.attributes[0].value + \".\" + metadata.attributes[1].value + \".\" + metadata.attributes[2].value + \".\" + metadata.attributes[3].value + \".\" + metadata.attributes[4].value + \".\" + metadata.attributes[5].value + \".\" + metadata.attributes[6].value) : null));\n      traits = traits.join();\n      //setTimeout(setCharacters, 5000, traits);\n\n      /*\n      const result = data ? data.hic_et_nunc_token_holder : null;\n      console.log(result)\n      setCollections(result)\n      let objktIds = result.map(({ token }) => (token.id))\n      objktIds = objktIds.join();\n      console.log(objktIds)\n      setTimeout(setCharacters, 5000, objktIds);\n      return result\n      */\n    }\n    if (activeAccount) {\n      //getNfts(activeAccount.address);\n      fetchCollection(activeAccount.address);\n    } else {\n      //setTimeout(setCharacters, 1000, \"public\");\n    }\n\n  }, [activeAccount]);\n\n\n  useEffect(() => {\n    async function getAcc() {\n      setActiveAccount(await dAppClient.getActiveAccount());\n      if (activeAccount) {\n        setSynced(\n          activeAccount.address.slice(0, 6) +\n          \"...\" +\n          activeAccount.address.slice(32, 36)\n        );\n        setShowUnsync(true);\n      } else {\n        setSynced(\"sync\");\n        setShowUnsync(false);\n      }\n    }\n    getAcc();\n  }, [activeAccount]);\n\n  async function unsync() {\n    setActiveAccount(await dAppClient.getActiveAccount());\n    if (activeAccount) {\n      // User already has account connected, everything is ready\n      dAppClient.clearActiveAccount().then(async () => {\n        setActiveAccount(await dAppClient.getActiveAccount());\n        setSynced(\"sync\");\n        setShowUnsync(false);\n      });\n    }\n  }\n\n  async function sync() {\n    setActiveAccount(await dAppClient.getActiveAccount());\n    //Already connected\n    if (activeAccount) {\n      setSynced(activeAccount.address);\n      setShowUnsync(true);\n      return activeAccount;\n    }\n    // The user is not synced yet\n    else {\n      try {\n        console.log(\"Requesting permissions...\");\n        const permissions = await dAppClient.requestPermissions();\n        setActiveAccount(await dAppClient.getActiveAccount());\n        console.log(\"Got permissions:\", permissions.address);\n        setSynced(permissions.address);\n        setShowUnsync(true);\n\n      } catch (error) {\n        console.log(\"Got error:\", error);\n      }\n    }\n  }\n\n\n  return (\n    <div>\n      <div\n        className=\"top-left\"\n        style={{ position: \"absolute\", display: \"flex\", alignItems: \"center\", backgroundColor: \"black\", padding: 6, color: \"white\" }}\n      >\n        Elementals\n      </div>\n\n\n      <Unity\n        unityContext={unityContext}\n        //matchWebGLToCanvasSize={true}\n        style={{ width: \"100vw\", height: \"100vh\" }}\n      />\n\n      <div\n        className=\"top-right\"\n        style={{ position: \"absolute\", display: \"flex\", alignItems: \"center\", backgroundColor: \"black\", color: \"white\" }}\n      >\n        {showUnsync && (\n          <Button\n            size={\"small\"}\n            title={\"unsync\"}\n            onClick={() => {\n              unsync();\n            }}\n            style={{ fontFamily: \"Alagard\", color: \"white\" }}\n          >\n            <u>unsync</u>{\" \"}\n          </Button>\n        )}\n\n        {showUnsync && <div> | </div>}\n        <Button\n          title={\"sync\"}\n          size={\"small\"}\n          onClick={async () => {\n            await sync();\n          }}\n          style={{ fontFamily: \"Alagard\", color: \"white\" }}\n        >\n          <u>{synced}</u>{\" \"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst query_collection = `\nquery Query($id: String!, $take: Int, $skip: Int, $sort: UserCollectionSortInput, $filters: ObjktFilter) {\n  user(id: $id) {\n    id\n    objkts(take: $take, skip: $skip, sort: $sort, filters: $filters) {\n      id\n      assigned\n      rarity\n      iteration\n      owner {\n        id\n        name\n        flag\n        avatarUri\n        __typename\n      }\n      issuer {\n        name\n        flag\n        author {\n          id\n          name\n          flag\n          avatarUri\n          __typename\n        }\n        __typename\n      }\n      name\n      metadata\n      createdAt\n      offer {\n        id\n        price\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n`","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}