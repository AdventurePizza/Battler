{"version":3,"sources":["firebaseContext.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FirebaseContext","React","createContext","getNfts","Promise","resolve","isSuccessful","FirebaseProvider","children","useCallback","address","a","fetch","method","fetchRes","console","log","ok","json","Provider","value","dAppClient","DAppClient","name","unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","useContext","useState","activeAccount","setActiveAccount","synced","setSynced","showUnsync","setShowUnsync","setCharacters","objktIds","send","getActiveAccount","clearActiveAccount","then","sync","requestPermissions","permissions","useEffect","fetchGraphQL","operationsDoc","operationName","variables","body","JSON","stringify","query","headers","result","ress","addr","query_collection","errors","data","error","user","objkts","traits","map","issuer","metadata","assigned","author","id","attributes","join","setTimeout","fetchCollection","slice","getAcc","style","width","height","className","position","display","alignItems","backgroundColor","Button","size","title","onClick","unsync","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.bc83a59c.chunk.js","sourcesContent":["// @ts-nocheck\nimport React, { useCallback } from \"react\";\n\n\nexport interface IFirebaseContext {\n  getNfts: (address: string) => Promise<IFetchResponseBase>;\n}\n\nexport const FirebaseContext = React.createContext<IFirebaseContext>({\n  getNfts: () => Promise.resolve({ isSuccessful: false }),\n});\n\nconst fetchBase =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8000\"\n    : \"https://network1-backend.herokuapp.com\";\n\n\nexport const FirebaseProvider: React.FC = ({ children }) => {\n  const getNfts = useCallback(\n    async (address: string): Promise<IFetchResponseBase> => {\n      const fetchRes = await fetch(fetchBase + `/users/getNfts/${address}`, {\n        method: \"GET\",\n      });\n      console.log(\"egg\")\n      if (fetchRes.ok) {\n        return await fetchRes.json();\n      }\n    },\n    []\n  );\n\n\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        getNfts,\n      }}\n    >\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n","// @ts-nocheck\nimport \"./App.css\";\nimport React, { useEffect, useState, useContext } from \"react\";\n\n//ui\nimport { Button } from \"@material-ui/core\";\n\n//logic\nimport { DAppClient } from \"@airgap/beacon-sdk\";\nimport Unity, { UnityContext } from \"react-unity-webgl\";\nimport { FirebaseContext } from \"./firebaseContext\";\n\nconst dAppClient = new DAppClient({ name: \"Beacon Docs\" });\n\nconst unityContext = new UnityContext({\n  loaderUrl: \"buildUnity/test4.loader.js\",\n  dataUrl: \"buildUnity/test4.data\",\n  frameworkUrl: \"buildUnity/test4.framework.js\",\n  codeUrl: \"buildUnity/test4.wasm\",\n});\n\nfunction App() {\n  const { getNfts } = useContext(FirebaseContext);\n  const [activeAccount, setActiveAccount] = useState();\n  const [synced, setSynced] = useState(\"sync\");\n  const [showUnsync, setShowUnsync] = useState(false);\n  const [collections, setCollections] = useState([]);\n\n  async function setCharacters(objktIds) {\n\n    unityContext.send(\"GameManager\", \"setCharacters\", objktIds);\n  }\n\n  useEffect(() => {\n    async function fetchGraphQL(operationsDoc, operationName, variables) {\n      let result = await fetch('https://api.fxhash.xyz/graphql', {\n        method: 'POST',\n        body: JSON.stringify({\n          query: operationsDoc,\n          variables: variables,\n          operationName: operationName,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      })\n\n      var ress = await result.json();\n      return ress;\n    }\n\n    async function fetchCollection(addr) {\n      const { errors, data } = await fetchGraphQL(\n        query_collection,\n        'Query',\n        {\n          \"id\": addr,\n          \"skip\": 0,\n          \"take\": 20,\n          \"filters\": {},\n          \"sort\": {\n            \"id\": \"DESC\"\n          }\n        }\n      )\n      if (errors) {\n        console.error(errors)\n      }\n      console.log(data)\n      const result = data ? data.user.objkts : null;\n      let traits = result.map(({ issuer, metadata, assigned }) => ((issuer.author.id === \"tz2DNkXjYmJwtYceizo3LwNVrqfrguWoqmBE\" && assigned) ?\n        (metadata.attributes[0].value + \".\" + metadata.attributes[1].value + \".\" + metadata.attributes[2].value) : null));\n      traits = traits.join();\n      setTimeout(setCharacters, 5000, traits);\n\n      /*\n      const result = data ? data.hic_et_nunc_token_holder : null;\n      console.log(result)\n      setCollections(result)\n      let objktIds = result.map(({ token }) => (token.id))\n      objktIds = objktIds.join();\n      console.log(objktIds)\n      setTimeout(setCharacters, 5000, objktIds);\n      return result\n      */\n    }\n    if (activeAccount) {\n      //getNfts(activeAccount.address);\n      fetchCollection(activeAccount.address);\n    }\n\n  }, [activeAccount]);\n\n\n  useEffect(() => {\n    async function getAcc() {\n      setActiveAccount(await dAppClient.getActiveAccount());\n      if (activeAccount) {\n        setSynced(\n          activeAccount.address.slice(0, 6) +\n          \"...\" +\n          activeAccount.address.slice(32, 36)\n        );\n        setShowUnsync(true);\n      } else {\n        setSynced(\"sync\");\n        setShowUnsync(false);\n      }\n    }\n    getAcc();\n  }, [activeAccount]);\n\n  async function unsync() {\n    setActiveAccount(await dAppClient.getActiveAccount());\n    if (activeAccount) {\n      // User already has account connected, everything is ready\n      dAppClient.clearActiveAccount().then(async () => {\n        setActiveAccount(await dAppClient.getActiveAccount());\n        setSynced(\"sync\");\n        setShowUnsync(false);\n      });\n    }\n  }\n\n  async function sync() {\n    setActiveAccount(await dAppClient.getActiveAccount());\n    //Already connected\n    if (activeAccount) {\n      setSynced(activeAccount.address);\n      setShowUnsync(true);\n      return activeAccount;\n    }\n    // The user is not synced yet\n    else {\n      try {\n        console.log(\"Requesting permissions...\");\n        const permissions = await dAppClient.requestPermissions();\n        setActiveAccount(await dAppClient.getActiveAccount());\n        console.log(\"Got permissions:\", permissions.address);\n        setSynced(permissions.address);\n        setShowUnsync(true);\n\n      } catch (error) {\n        console.log(\"Got error:\", error);\n      }\n    }\n  }\n\n\n  return (\n    <div>\n      <Unity\n        unityContext={unityContext}\n        style={{ width: \"100%\", height: \"100vh\" }}\n      />\n\n      <div\n        className=\"top-right\"\n        style={{ position: \"absolute\", display: \"flex\", alignItems: \"center\", backgroundColor: \"white\" }}\n      >\n        {showUnsync && (\n          <Button\n            size={\"small\"}\n            title={\"unsync\"}\n            onClick={() => {\n              unsync();\n            }}\n          >\n            <u>unsync</u>{\" \"}\n          </Button>\n        )}\n\n        {showUnsync && <div> | </div>}\n        <Button\n          title={\"sync\"}\n          size={\"small\"}\n          onClick={async () => {\n            await sync();\n          }}\n        >\n          <u>{synced}</u>{\" \"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst query_collection = `\nquery Query($id: String!, $take: Int, $skip: Int, $sort: UserCollectionSortInput, $filters: ObjktFilter) {\n  user(id: $id) {\n    id\n    objkts(take: $take, skip: $skip, sort: $sort, filters: $filters) {\n      id\n      assigned\n      rarity\n      iteration\n      owner {\n        id\n        name\n        flag\n        avatarUri\n        __typename\n      }\n      issuer {\n        name\n        flag\n        author {\n          id\n          name\n          flag\n          avatarUri\n          __typename\n        }\n        __typename\n      }\n      name\n      metadata\n      createdAt\n      offer {\n        id\n        price\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n`","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport App from \"./App\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FirebaseProvider } from \"./firebaseContext\";\nimport { SnackbarProvider } from \"notistack\";\n\nReactDOM.render(\n  <FirebaseProvider>\n    <SnackbarProvider maxSnack={3}>\n      <App />\n    </SnackbarProvider>\n  </FirebaseProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}